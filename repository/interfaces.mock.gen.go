// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/prapsky/sawitpro/entity"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockRepositoryInterface) FindByID(ctx context.Context, id uint64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryInterfaceMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepositoryInterface)(nil).FindByID), ctx, id)
}

// FindByPhoneNumber mocks base method.
func (m *MockRepositoryInterface) FindByPhoneNumber(ctx context.Context, phoneNumber string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhoneNumber indicates an expected call of FindByPhoneNumber.
func (mr *MockRepositoryInterfaceMockRecorder) FindByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhoneNumber", reflect.TypeOf((*MockRepositoryInterface)(nil).FindByPhoneNumber), ctx, phoneNumber)
}

// Insert mocks base method.
func (m *MockRepositoryInterface) Insert(ctx context.Context, input entity.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, input)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryInterfaceMockRecorder) Insert(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepositoryInterface)(nil).Insert), ctx, input)
}

// InsertLoginAttempts mocks base method.
func (m *MockRepositoryInterface) InsertLoginAttempts(ctx context.Context, input entity.LoginAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLoginAttempts", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLoginAttempts indicates an expected call of InsertLoginAttempts.
func (mr *MockRepositoryInterfaceMockRecorder) InsertLoginAttempts(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLoginAttempts", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertLoginAttempts), ctx, input)
}

// UpdateByID mocks base method.
func (m *MockRepositoryInterface) UpdateByID(ctx context.Context, input entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateByID(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateByID), ctx, input)
}

// UpdateSuccessfulLogins mocks base method.
func (m *MockRepositoryInterface) UpdateSuccessfulLogins(ctx context.Context, input entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuccessfulLogins", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSuccessfulLogins indicates an expected call of UpdateSuccessfulLogins.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateSuccessfulLogins(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuccessfulLogins", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateSuccessfulLogins), ctx, input)
}
