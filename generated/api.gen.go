// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password    *string `json:"password,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Data *LoginResponseData `json:"data,omitempty"`
}

// LoginResponseData defines model for LoginResponseData.
type LoginResponseData struct {
	Token  *string `json:"token,omitempty"`
	UserID *uint64 `json:"userID,omitempty"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Data *ProfileResponseData `json:"data,omitempty"`
}

// ProfileResponseData defines model for ProfileResponseData.
type ProfileResponseData struct {
	FullName    *string `json:"fullName,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	FullName    *string `json:"fullName,omitempty"`
	Password    *string `json:"password,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Data *RegisterResponseData `json:"data,omitempty"`
}

// RegisterResponseData defines model for RegisterResponseData.
type RegisterResponseData struct {
	UserID *uint64 `json:"userID,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This endpoint is to login to an account.
	// (POST /login)
	Login(ctx echo.Context) error
	// This endpoint is to view user profile.
	// (GET /profile)
	Profile(ctx echo.Context) error
	// This endpoint is to register a new account.
	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Profile converts echo context to params.
func (w *ServerInterfaceWrapper) Profile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Profile(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/profile", wrapper.Profile)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVQVPbOhD+K5p97+jBIUAe4xsMr1OYlnaATg9MDoq8SURtSV1JQIbxf+9IdpLacYAZ",
	"wqE9xbF3v/2037erJxC6NFqhchayJ7BijiWPj/8TabpCa7SyGF4oXxR8UiBkjjwmYEgbJCcxhpdoLZ/F",
	"QHzkpQlxNQYk4BYm/LWOpJpBVa3e6MkdCgdVAp/0TKor/OnRugDSRjfc2gdNeXjugCVg5lrhpS8nSD3f",
	"nym2Plu7Ws4dD7//Ek4hg3/SdZPSpkNpC+IsJLxc6azBbVdz+geqdt/2hwd8IjYbl4C3SOdnrejhIIGp",
	"ppI7yMBL5UaH60ypHM6Q+sl9JT2VBb6tER2Q7a3oC9yoOPVFccnLjo8uZCnZR1Q5yce+rnQcsEocDY+P",
	"RvvDg8Oj0X/Hr7LhFc6kdUhbnfg7wU0eu7XpmsxbBOqibFeoN3Kj5g4tWCVgUXiSbnEd2NYFJsgJ6cS7",
	"+frfhyX6xfcbSOo9FZDqr+tic+cMVAFYqqkO+YUUuNxgUTf4fH4TTuuki+b6ZpHYNdK9FAgJ3CNZqVWY",
	"wr3B3iBEaoOKGwkZHMRXQWg3j1zTIgx4bJKu7RJaxZ3U6jyHrJ5/SIBqP53qfBGChFYOVYznxhRSxIz0",
	"zmq1XsOvXEG1UeOZc7SCpHE1/7p2FYrXekbGw8Fg1wwad/ZQOGHWC4HWTn3BaBWYwOEOWbRvqh4Wpzxn",
	"tOpTAtaXJacFZHAzl5ahyo2WyjFpmdMsKhoeuGJcCO2V2wsG4zML2W20C4wDTGrqjRb4zbBH/GbjwTsq",
	"0F3hf44GzdxDdtue+NtxNX5JonuJDyzsIdZIsEUgahba9vlcrrx3GtHuddLTmBWD9xzUjZvkL5nVpcCM",
	"M4UPz41rtByF5R4d56lobossTQsteDEP/gjWazKfOsS+LH1jGZ9o76L/IFleKrFONa5+BQAA//+aWOs3",
	"UgsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
