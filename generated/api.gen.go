// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password    *string `json:"password,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Data *LoginResponseData `json:"data,omitempty"`
}

// LoginResponseData defines model for LoginResponseData.
type LoginResponseData struct {
	Token  *string `json:"token,omitempty"`
	UserID *uint64 `json:"userID,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	FullName    *string `json:"fullName,omitempty"`
	Password    *string `json:"password,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	Data *RegisterResponseData `json:"data,omitempty"`
}

// RegisterResponseData defines model for RegisterResponseData.
type RegisterResponseData struct {
	UserID *uint64 `json:"userID,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This endpoint is to login to an account.
	// (POST /login)
	Login(ctx echo.Context) error
	// This endpoint is to register a new account.
	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.POST(baseURL+"/register", wrapper.Register)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xUT0/cPhD9Ktb8fseIbAH1kFsRPSC1VKL0hDh4ndmNaWK74zEUrfLdq3H2j7JkaaUu",
	"l54w3vGbN++9zAqM74J36DhCtYJoGux0Pn4k8nSDMXgXUS5cals9bxEqpoQFBPIBiS3m8g5j1MtciD91",
	"F6RuwIAC+DnIv5HJuiX0/fbGzx/QMPQFfPJL627wR8LIAjJGDzrGJ0+1nPfACgiNd3idujnSxO+vNNvN",
	"Nu5Wa9by93/CBVTwX7kTqVwrVI4gLuXB7ztdrnHH3dh/RzfW7d3pmZ6bl8IVkCLS1eWo+nRWwMJTpxkq",
	"SNbx+/PdS+sYl0jT5G5waSMjHZR9kdr2Wnc4LftxPdmR+Rtb9lEOOzNZ+aLnEfWWK+sWXsBaa3DzWWV9",
	"4fPVrbBiyzkB3yKS+or0aA1CAY9I0Xon0TiZncyk0gd0Olio4CxfiSHcZNJlK6nLw/jBVhlJs/XuqoZq",
	"CCUUQIPvF75+liLjHaPL9TqE1pr8onyI3u12wx9+F0Og8sw1RkM28MB/6N1L80H3zPh0Njs2g3WKJih8",
	"UDEZgzEuUqtoW1jA+RFZjNfnBIsLXSva6lRATF2n6RkquG1sVOjq4K1jZaNir7KjctBOaWN8cnwiqdPL",
	"CNVdjgvcC0xJ61wftn+T/DdKwP5WmZh9y+Atc/BiofwjUdgYrLRy+PRaGgQKSXYHVHcrSNRCBQ1zqMqy",
	"9Ua3jeSjv9++XO0R+7LJTVR67hMrWYdQbHZW7tPf978CAAD//2AZWw9GCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
